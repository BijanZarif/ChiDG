!> Test that solverdata_t was returned 'allocated'
@Test
subroutine test__create_solver__allocated()
    use pfunit_mod
    use mod_kinds,          only: rk,ik
    use mod_solver,         only: create_solver
    use atype_solver,       only: solver_t
    
    implicit none
    class(solver_t),        allocatable :: solver
    
    
    !> PROCEDURE BEING TESTED
    call create_solver('fe',solver)
    
    
    !> Test allocated
    @assertTrue(allocated(solver))
    
end subroutine






!> Test that allocated type is returned with expected type
@Test
subroutine test__create_solver__type()
    use pfunit_mod
    use mod_kinds,              only: rk,ik
    use mod_solver,             only: create_solver
    use atype_solver,           only: solver_t
    use solver_forward_euler,   only: forward_euler_s
    
    implicit none
    class(solver_t),    allocatable :: solver
    
    
        
    !> PROCEDURE BEING TESTED
    call create_solver('fe',solver)
    
    
    !> Test for correct type
    select type(solver)
        type is (forward_euler_s)
            !> correct type
            @assertTrue(.true.) 
        
        class default
            !> correct type was not detected, ERROR
            @assertTrue(.false.) 
    end select
            
    
end subroutine

