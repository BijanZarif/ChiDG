module test_blockmatrix_mod
    use pfunit_mod
    use type_chidg,         only: chidg_t
    use mod_kinds,          only: rk,ik
    use mod_constants,      only: ZERO, ONE, TWO, THREE, FIVE, SIX, EIGHT, NINE, TEN, &
                                  XI_MIN, XI_MAX, ETA_MIN, ETA_MAX, ZETA_MIN, ZETA_MAX
    use mod_hdfio,          only: read_grid_hdf
    use mod_interpolate,    only: interpolate
    use mod_grid_operators, only: initialize_variable
    use type_domain,        only: domain_t
    use DNAD_D
    use fcn_constant,       only: constant_f
    implicit none

    public  :: test_blockmatrix

@TestCase
    type, extends(TestCase) ::  test_blockmatrix
        type(chidg_t)                   :: chidg
        type(domain_t), allocatable     :: domain(:)
        type(constant_f)                :: fcn

    contains
        procedure   ::  setUp
        procedure   ::  tearDown
    end type test_blockmatrix


contains
    !> NOTE: make sure to use 'this' instead of 'self' since these are over-writting a derived type 
    !! procedure. The argument names have to match
    subroutine setUp(this)
        class(test_blockmatrix),    intent(inout)   :: this
        integer(ik)                                 :: nterms_s, ivar
        
        associate (dom => this%domain)
    
            
            !> Initialize ChiDG environment
            call this%chidg%init()
    
    
            !> Read 3x3x3 element grid
            call read_grid_hdf('D1_E27_M1.h5', this%domain)
    
    
            !> Initialize domain numerics
            nterms_s = 8
            call this%domain(1)%init_sol('Scalar',nterms_s)
    
    
            !> Initialized solution to constant values
            ivar = this%domain(1)%eqnset%get_var('u')               !> Get variable index
            call this%fcn%set(5._rk)                                !> Set constant function value
            call initialize_variable(this%domain(1),ivar,this%fcn)  !> Initialize variable using constant function
    
    
        end associate        
    end subroutine
    
    subroutine tearDown(this)
        class(test_blockmatrix),    intent(inout)   :: this
        
    end subroutine


!------------------------------------------------------------------------------------------------------


!> Test interpolation of modes to volume quadrature nodes. No AD variables
@Test
    subroutine test_blockmatrix__initialize_linearization(self)
        class(test_blockmatrix),    intent(inout)   :: self
        
        integer(ik)                 :: ielem, ivar, ngq
        real(rk), allocatable       :: u_gq(:), u_ref(:)
        real(rk)                    :: tol
        
        associate ( elems => self%domain(1)%mesh%elems, q => self%domain(1)%q, rhs => self%domain(1)%rhs )        
            tol   = 1.e-13_rk
            ielem = 14
            ivar  = 1

            ngq = elems(ielem)%gq%nnodes_v

            allocate(u_gq(ngq))
            allocate(u_ref(ngq))
            
            
            !> PROCEDURE BEING TESTED
            call interpolate(elems,q,ielem,ivar,u_gq)
            
            
            !> Initialize reference
            u_ref = self%fcn%value_ 
            
            !> Test that standard interpolation to quadrature 
            !! on an element volume is producing expected results
            @assertEqual(u_ref,u_gq,tol)
            
        end associate
    end subroutine
    
    
    


end module test_blockmatrix_mod