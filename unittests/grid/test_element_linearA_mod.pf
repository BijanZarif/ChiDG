module test_element_linearA_mod
    use pfunit_mod
    use mod_kinds,      only: rk,ik
    use mod_constants,  only: ZERO, ONE, TWO, THREE, FIVE, SIX, EIGHT, NINE, TEN, &
                              XI_MIN, XI_MAX, ETA_MIN, ETA_MAX, ZETA_MIN, ZETA_MAX
    use type_chidg,     only: chidg_t
    use type_point,     only: point_t
    use type_element,   only: element_t
    use type_face,      only: face_t
    use type_test,      only: test_t
    implicit none

    public  :: test_element_linearA

@TestCase
    type, extends(TestCase) ::  test_element_linearA
        type(chidg_t)               :: chidg
        type(element_t)             :: elem
        type(face_t), allocatable   :: faces(:)

    contains
        procedure   ::  setUp
        procedure   ::  tearDown
    end type test_element_linearA


contains
    !> NOTE: make sure to use 'this' instead of 'self' since these are over-writting a derived type 
    !! procedure. The argument names have to match
    subroutine setUp(this)
        class(test_element_linearA),    intent(inout)   :: this
        
        integer(ik), parameter  :: npt = 8
        type(point_t)           :: pts(npt)
        integer(ik)             :: ftype, ineighbor, mapping, ielem
        
        
        call this%chidg%init()
        allocate(this%faces(6))
        
        !> (x = 0-5 :: y = 0-1 :: z = 0-1)
        !!          *-------*
        !!         /       /|
        !!    x=5 /       / |
        !!       /       /  *
        !!      *-------*  /
        !!      |       | /
        !!  z=1 |       |/
        !!      *-------*
        !!         y=1
        !!
        call pts(1)%set(0._rk, 0._rk, 0._rk)
        call pts(2)%set(5._rk, 0._rk, 0._rk)
        call pts(3)%set(0._rk, 1._rk, 0._rk)
        call pts(4)%set(5._rk, 1._rk, 0._rk)
        call pts(5)%set(0._rk, 0._rk, 1._rk)
        call pts(6)%set(5._rk, 0._rk, 1._rk)
        call pts(7)%set(0._rk, 1._rk, 1._rk)
        call pts(8)%set(5._rk, 1._rk, 1._rk)
        
        
        !> Initialize Element geometry and Numerics
        mapping = 1
        ielem = 1
        call this%elem%init_geom(mapping,pts,ielem)
        call this%elem%init_sol(2,8)    !> 2 equations, 8 terms (3*3*3)
        
        
        ftype = 0
        ineighbor = 0
        !> Initialize faces for element
        call this%faces(XI_MIN)%init_geom(XI_MIN,ftype,this%elem,ineighbor)
        call this%faces(XI_MAX)%init_geom(XI_MAX,ftype,this%elem,ineighbor)
        call this%faces(ETA_MIN)%init_geom(ETA_MIN,ftype,this%elem,ineighbor)
        call this%faces(ETA_MAX)%init_geom(ETA_MAX,ftype,this%elem,ineighbor)
        call this%faces(ZETA_MIN)%init_geom(ZETA_MIN,ftype,this%elem,ineighbor)
        call this%faces(ZETA_MAX)%init_geom(ZETA_MAX,ftype,this%elem,ineighbor)
        
        call this%faces(XI_MIN)%init_sol(this%elem)
        call this%faces(XI_MAX)%init_sol(this%elem)
        call this%faces(ETA_MIN)%init_sol(this%elem)
        call this%faces(ETA_MAX)%init_sol(this%elem)
        call this%faces(ZETA_MIN)%init_sol(this%elem)
        call this%faces(ZETA_MAX)%init_sol(this%elem)
    end subroutine
    
    subroutine tearDown(this)
        class(test_element_linearA),    intent(inout)   :: this
    end subroutine





!> Test element metric entries at quadrature points
@Test
    subroutine testElement_metric(self)
        class(test_element_linearA),    intent(inout)   :: self
        real(rk)    :: test_metric(3,3,self%elem%gq%vol%nnodes)
        
        test_metric(1,1,:) = 0.25_rk
        test_metric(2,1,:) = 0._rk
        test_metric(3,1,:) = 0._rk
        test_metric(1,2,:) = 0._rk
        test_metric(2,2,:) = 1.25_rk
        test_metric(3,2,:) = 0._rk
        test_metric(1,3,:) = 0._rk
        test_metric(2,3,:) = 0._rk
        test_metric(3,3,:) = 1.25_rk
        @assertEqual(test_metric,self%elem%metric)
        
    end subroutine



!> Test inverse element jacobian entries at quadrature points
@Test
    subroutine testElement_jinv(self)
        class(test_element_linearA),    intent(inout)   :: self
        real(rk)    :: test_jinv(self%elem%gq%vol%nnodes)
        
        test_jinv = 0.625_rk
        @assertEqual(test_jinv,self%elem%jinv)
    end subroutine
    

!> Test mass matrix entries
@Test
    subroutine testElement_mass(self)
        class(test_element_linearA),    intent(inout)   :: self
        real(rk)    :: test_mass(self%elem%nterms_s,self%elem%nterms_s)
        real(rk)    :: tol
        
        tol = 1.e-15_rk
        
        test_mass = ZERO
        test_mass(1,1) = EIGHT
        test_mass(2,2) = EIGHT/THREE
        test_mass(3,3) = EIGHT/THREE
        test_mass(4,4) = EIGHT/THREE
        test_mass(5,5) = EIGHT/NINE
        test_mass(6,6) = EIGHT/NINE
        test_mass(7,7) = EIGHT/NINE
        test_mass(8,8) = EIGHT/27._rk
        
        test_mass = 0.625_rk * test_mass
        
        @assertEqual(test_mass,self%elem%mass,tol)
    end subroutine



!> Test cartesian coordinate values at quadrature nodes
@Test
    subroutine testElement_quadpts(self)
        class(test_element_linearA),    intent(inout)   :: self
        real(rk), dimension(self%elem%gq%vol%nnodes)    :: test_x, test_y, test_z
        real(rk)                                        :: x1,x2,y1,y2,z1,z2

        x1 = 2.5_rk*(ONE - sqrt(ONE/THREE))
        x2 = 2.5_rk*(ONE + sqrt(ONE/THREE))
        y1 = 0.5_rk*(ONE - sqrt(ONE/THREE))
        y2 = 0.5_rk*(ONE + sqrt(ONE/THREE))
        z1 = 0.5_rk*(ONE - sqrt(ONE/THREE))
        z2 = 0.5_rk*(ONE + sqrt(ONE/THREE))
        test_x = [x1, x2, x1, x2, x1, x2, x1, x2]
        test_y = [y1, y1, y2, y2, y1, y1, y2, y2]
        test_z = [z1, z1, z1, z1, z2, z2, z2, z2]
        
        @assertEqual(test_x,self%elem%quad_pts(:)%c1_)
        @assertEqual(test_y,self%elem%quad_pts(:)%c2_)
        @assertEqual(test_z,self%elem%quad_pts(:)%c3_)
    end subroutine



!------------------------------------------------------------------------------
!>                                Face tests
!------------------------------------------------------------------------------


@Test
    subroutine testElement_face_metrics(self)
        class(test_element_linearA),    intent(inout)   :: self
        real(rk)    :: test_metric(3,3,self%faces(XI_MAX)%gq%face%nnodes)
        real(rk)    :: tol
        
        tol = 1.e-14_rk
        
        test_metric(1,1,:) = 0.25_rk
        test_metric(2,1,:) = 0._rk
        test_metric(3,1,:) = 0._rk
        test_metric(1,2,:) = 0._rk
        test_metric(2,2,:) = 1.25_rk
        test_metric(3,2,:) = 0._rk
        test_metric(1,3,:) = 0._rk
        test_metric(2,3,:) = 0._rk
        test_metric(3,3,:) = 1.25_rk
        
        @assertEqual(test_metric,self%faces(XI_MIN)%metric,tol)
        @assertEqual(test_metric,self%faces(XI_MAX)%metric,tol)
        @assertEqual(test_metric,self%faces(ETA_MIN)%metric,tol)
        @assertEqual(test_metric,self%faces(ETA_MAX)%metric,tol)
        @assertEqual(test_metric,self%faces(ZETA_MIN)%metric,tol)
        @assertEqual(test_metric,self%faces(ZETA_MAX)%metric,tol)
    end subroutine


@Test
    subroutine testElement_face_normals(self)
        class(test_element_linearA),    intent(inout)   :: self
        real(rk), dimension(self%faces(XI_MAX)%gq%face%nnodes) :: test_norm_x, test_norm_y, test_norm_z
        real(rk)    :: tol
        
        tol = 1.e-15_rk
        
        ! XI_MIN
        test_norm_x = -0.25_rk
        test_norm_y = ZERO
        test_norm_z = ZERO
        
        @assertEqual(test_norm_x,self%faces(XI_MIN)%norm(:,1),tol)
        @assertEqual(test_norm_y,self%faces(XI_MIN)%norm(:,2),tol)
        @assertEqual(test_norm_z,self%faces(XI_MIN)%norm(:,3),tol)
        
        ! XI_MAX
        test_norm_x = 0.25_rk
        test_norm_y = ZERO
        test_norm_z = ZERO
        
        @assertEqual(test_norm_x,self%faces(XI_MAX)%norm(:,1),tol)
        @assertEqual(test_norm_y,self%faces(XI_MAX)%norm(:,2),tol)
        @assertEqual(test_norm_z,self%faces(XI_MAX)%norm(:,3),tol)
        
        ! ETA_MIN
        test_norm_x = ZERO
        test_norm_y = -1.25_rk
        test_norm_z = ZERO
        
        @assertEqual(test_norm_x,self%faces(ETA_MIN)%norm(:,1),tol)
        @assertEqual(test_norm_y,self%faces(ETA_MIN)%norm(:,2),tol)
        @assertEqual(test_norm_z,self%faces(ETA_MIN)%norm(:,3),tol)     
        
        ! ETA_MAX
        test_norm_x = ZERO
        test_norm_y = 1.25_rk
        test_norm_z = ZERO
        
        @assertEqual(test_norm_x,self%faces(ETA_MAX)%norm(:,1),tol)
        @assertEqual(test_norm_y,self%faces(ETA_MAX)%norm(:,2),tol)
        @assertEqual(test_norm_z,self%faces(ETA_MAX)%norm(:,3),tol)

        ! ZETA_MIN
        test_norm_x = ZERO
        test_norm_y = ZERO
        test_norm_z = -1.25_rk
        
        @assertEqual(test_norm_x,self%faces(ZETA_MIN)%norm(:,1),tol)
        @assertEqual(test_norm_y,self%faces(ZETA_MIN)%norm(:,2),tol)
        @assertEqual(test_norm_z,self%faces(ZETA_MIN)%norm(:,3),tol)
        
        ! ZETA_MAX
        test_norm_x = ZERO
        test_norm_y = ZERO
        test_norm_z = 1.25_rk
        
        @assertEqual(test_norm_x,self%faces(ZETA_MAX)%norm(:,1),tol)
        @assertEqual(test_norm_y,self%faces(ZETA_MAX)%norm(:,2),tol)
        @assertEqual(test_norm_z,self%faces(ZETA_MAX)%norm(:,3),tol)
       

    end subroutine



















end module test_element_linearA_mod