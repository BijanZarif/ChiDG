module test_linearadvection_mod
    use pfunit_mod
    use mod_kinds,          only: rk,ik
    use mod_constants,      only: ZERO, ONE, TWO, THREE, FIVE, SIX, EIGHT, NINE, TEN, &
                                  XI_MIN, XI_MAX, ETA_MIN, ETA_MAX, ZETA_MIN, ZETA_MAX, NFACES
    use type_chidg,         only: chidg_t
    use type_point,         only: point_t
    use type_domain,        only: domain_t
    use type_densematrix,   only: densematrix_t
    use mod_testutils,      only: meshgen
    use mod_check_jacobian
    implicit none

    public  :: test_equation_linearadvection

@TestCase
    type, extends(TestCase) ::  test_equation_linearadvection
        type(chidg_t)       :: chidg
        type(domain_t)      :: domain
    contains
        procedure   ::  setUp
        procedure   ::  tearDown
    end type test_equation_linearadvection


contains
    !> NOTE: make sure to use 'this' instead of 'self' since these are over-writting a derived type 
    !! procedure. The argument names have to match
    subroutine setUp(this)
        class(test_equation_linearadvection),    intent(inout)   :: this
        
        integer(ik), parameter      :: npt = 64
        type(point_t), allocatable  :: pts(:,:,:)
        integer(ik)                 :: neqns, nterms_s, nterms_c
        real(rk), dimension(npt)    :: x,y,z
        
        !> Initialize chidg environment
        call this%chidg%init()

        !> Generate points array for 3x3x3 mesh
        call meshgen('3x3x3',pts)

        !> Initialize domain
        nterms_s = 8
        nterms_c = 8
        call this%domain%init_geom(nterms_c,pts)
        call this%domain%init_sol('LA',nterms_s)

    end subroutine
    
    subroutine tearDown(this)
        class(test_equation_linearadvection),    intent(inout)   :: this
    end subroutine





!> Test Volume Flux jacobian calclation
@Test
    subroutine test_LinearAdvection_jacobian_volume_flux(self)
        class(test_equation_linearadvection),    intent(inout)   :: self
        
        type(densematrix_t) :: blk_dnad, blk_fd
        integer(ik) :: ielem, ivar, iblk
        real(rk)    :: tol
        
        tol = 1.0e-7_rk
        
        ielem = 14
        ivar  = 1
        
        iblk = 7    !> DIAG
        
        !> Compute Automatic and Finite Difference jacobians
        call check_jacobian_volume_flux(self%domain,ielem,ivar,iblk,blk_dnad,blk_fd)
        
        
        @assertEqual(blk_fd%mat, blk_dnad%mat, tol)
        
        
    end subroutine
    
    


!> Test Boundary Average Flux jacobian calclation
!@Test(cases = [1, 2, 3, 4, 5, 6, 7])
@Test
    subroutine test_LinearAdvection_jacobian_boundary_average_flux(self)
        class(test_equation_linearadvection),    intent(inout)   :: self
        
        type(densematrix_t) :: blk_dnad, blk_fd
        integer(ik) :: ielem, iface, ivar, iblk
        real(rk)    :: tol
        
        tol = 1.0e-7_rk
        
        ielem = 14
        iface = 1
        ivar  = 1
        
        iblk = 7    !> DIAG
        
        !> Compute Automatic and Finite Difference jacobians
        call check_jacobian_boundary_average_flux(self%domain,ielem,iface,ivar,iblk,blk_dnad,blk_fd)
        
        
        @assertEqual(blk_fd%mat, blk_dnad%mat, tol)
        
        
    end subroutine
    
    
    
    
    
    
!> Test Boundary Upwind Flux jacobian calclation
@Test
    subroutine test_LinearAdvection_jacobian_boundary_upwind_flux(self)
        class(test_equation_linearadvection),    intent(inout)   :: self
        
        type(densematrix_t) :: blk_dnad, blk_fd
        integer(ik) :: ielem, iface, ivar, iblk
        real(rk)    :: tol
        
        tol = 1.0e-7_rk
        
        ielem = 14
        iface = 1
        ivar  = 1
        
        iblk = 7    !> DIAG
        
        !> Compute Automatic and Finite Difference jacobians
        call check_jacobian_boundary_upwind_flux(self%domain,ielem,iface,ivar,iblk,blk_dnad,blk_fd)
        
        
        @assertEqual(blk_fd%mat, blk_dnad%mat, tol)
        
        
    end subroutine
    
    
    
    













end module test_linearadvection_mod