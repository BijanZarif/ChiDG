@Test
subroutine test_operator_dot()
    use pfunit_mod

    use mod_kinds,          only: rk, ik
    use mod_constants,      only: ZERO, ONE, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE, TEN
    use type_blockvector,   only: blockvector_t
    use type_chidg,         only: chidg_t
    use type_domain,        only: domain_t
    use type_point,         only: point_t

    use mod_testutils,      only: meshgen

    use operator_dot
    implicit none


    type(chidg_t)               :: chidg
    type(domain_t)              :: dom
    type(point_t),  allocatable :: pts(:,:,:)
    type(blockvector_t)         :: a, b

    real(rk)                    :: tol
    integer(ik)                 :: nterms_c, nterms_s
    real(rk),   dimension(8)    :: vec_a1, vec_a2, vec_a3, vec_b1, vec_b2, vec_b3
    real(rk)                    :: dot_ref, dot_test


    tol         = 1.e-13_rk
    nterms_c    = 8
    nterms_s    = 8



    ! Initialize ChiDG
    call chidg%init('env')


    ! Get grid points
    call meshgen('311',pts)

    
    ! Initialize domain
    call dom%init_geom(nterms_c,pts)
    call dom%init_sol('Scalar',nterms_s)



    !
    ! Initialize data containers
    !
    call a%init(dom%mesh)
    call b%init(dom%mesh)


    !
    ! Initialize blockvector data (a)
    !
    vec_a1 = [ONE, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT]
    vec_a2 = [TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, ONE]
    vec_a3 = [THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, ONE, TWO]

    a%lvecs(1)%vec = vec_a1
    a%lvecs(2)%vec = vec_a2
    a%lvecs(3)%vec = vec_a3


    !
    ! Initialize blockvector data (b)
    !
    vec_b1 = [THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, ONE, TWO]
    vec_b2 = [ONE, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT]
    vec_b3 = [TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, ONE]

    b%lvecs(1)%vec = vec_b1
    b%lvecs(2)%vec = vec_b2
    b%lvecs(3)%vec = vec_b3



    !
    ! Compute reference dot product
    !    
    dot_ref = dot_product(vec_a1,vec_b1) + dot_product(vec_a2,vec_b2) + dot_product(vec_a3,vec_b3)


    !
    ! Compute dot product implementation. THIS IS BEING TESTED
    !
    dot_test = dot(a,b)



    @assertEqual(dot_ref,dot_test,tol)

end subroutine test_operator_dot


