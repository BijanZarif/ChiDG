@Test
subroutine test_chidgMatrix_operator_chimera_mv()
    use pfunit_mod

    use mod_kinds,          only: rk, ik
    use mod_constants,      only: XI_MIN, XI_MAX, ETA_MIN, ETA_MAX, ZETA_MIN, ZETA_MAX, DIAG, &
                                  ONE, TWO, THREE, FOUR, ZERO

    use type_chidg,         only: chidg_t
    use type_meshdata,      only: meshdata_t
    use atype_function,     only: function_t
    use type_point,         only: point_t


    use mod_grid_operators, only: initialize_variable
    use mod_function,       only: create_function
    use mod_hdfio,          only: read_grid_hdf
    use mod_spatial,        only: update_space

    use operator_chidg_mv
    implicit none


    type(chidg_t)                   :: chidg
    type(meshdata_t), allocatable   :: meshdata(:)
    class(function_t), allocatable  :: constant, gaussian
    real(rk), allocatable           :: density_residual_D4_E31(:), density_residual_D4_E36(:)
    integer(ik)                     :: ChiID, iface, nterms_s, ndonors, gq_index, igq, ngq, neqns
    integer(ik)                     :: idom, ielem, idom_d, ielem_d, idonor, idom_p, ielem_p, iblk
    real(rk)                        :: chi_xi, chi_eta, chi_zeta, ref_xi, ref_eta, ref_zeta
    type(point_t)                   :: chimera_node
    real(rk)                        :: tol
    real(rk), allocatable           :: mat_a(:,:), mat_b(:,:)
    real(rk), allocatable           :: vec_a(:), vec_b(:), refvec(:)


    tol      = 1.e-12_rk
    nterms_s = 8
    neqns    = 5


    !
    ! Initialize ChiDG
    !
    call chidg%init('env')



    !
    ! Read grid
    !
    !call read_grid_hdf('cylinder_chimera_overlapping.h5',meshdata)
    call read_grid_hdf('cylinder_chimera_overlapping_multipledonor.h5',meshdata)



    !
    ! Add domains
    !
    do idom = 1,size(meshdata)
        call chidg%data%add_domain(trim(meshdata(idom)%name),meshdata(idom)%points,meshdata(idom)%nterms_c,'euler',nterms_s)
    end do



    !
    ! Add boundary conditions ChiDG - A
    !
    !call chidg%data%add_bc('D_01','euler_totalinlet',XI_MIN)
    !call chidg%data%add_bc('D_01','euler_pressureoutlet',XI_MAX)
    call chidg%data%add_bc('D_01','euler_wall',ETA_MIN)
    call chidg%data%add_bc('D_01','euler_wall',ETA_MAX)
    call chidg%data%add_bc('D_01','euler_wall',ZETA_MIN)
    call chidg%data%add_bc('D_01','euler_wall',ZETA_MAX)


    !call chidg%data%add_bc('D_02','euler_totalinlet',XI_MIN)
    !call chidg%data%add_bc('D_02','euler_pressureoutlet',XI_MAX)
    call chidg%data%add_bc('D_02','euler_pressureoutlet',ETA_MIN)
    call chidg%data%add_bc('D_02','euler_wall',ETA_MAX)
    call chidg%data%add_bc('D_02','euler_wall',ZETA_MIN)
    call chidg%data%add_bc('D_02','euler_wall',ZETA_MAX)


    !call chidg%data%add_bc('D_03','euler_totalinlet',XI_MIN)
    !call chidg%data%add_bc('D_03','euler_pressureoutlet',XI_MAX)
    call chidg%data%add_bc('D_03','euler_wall',ETA_MIN)
    call chidg%data%add_bc('D_03','euler_wall',ETA_MAX)
    call chidg%data%add_bc('D_03','euler_wall',ZETA_MIN)
    call chidg%data%add_bc('D_03','euler_wall',ZETA_MAX)


    !call chidg%data%add_bc('D_04','euler_totalinlet',XI_MIN)
    !call chidg%data%add_bc('D_04','euler_pressureoutlet',XI_MAX)
    call chidg%data%add_bc('D_04','euler_totalinlet',ETA_MIN)
    call chidg%data%add_bc('D_04','euler_wall',ETA_MAX)
    call chidg%data%add_bc('D_04','euler_wall',ZETA_MIN)
    call chidg%data%add_bc('D_04','euler_wall',ZETA_MAX)






    !
    ! Initialize solution data storage
    !
    call chidg%init('chimera')
    call chidg%data%init_sdata()





    







    !
    ! Test computational coordinates
    !
    idom = 4
    ielem = 19
    iface = XI_MIN
    ChiID   = chidg%data%mesh(idom)%faces(ielem,iface)%ChiID



    !
    ! Set some chimera matrix values
    !
    idonor = 1
    ! Set matrix values corresponding to first donor
    chidg%data%sdata%lhs%dom(idom)%chiblks(ielem,idonor)%mat = ONE

    idom_d = chidg%data%mesh(idom)%chimera%recv%data(ChiID)%donor_domain%at(idonor)
    ielem_d = chidg%data%mesh(idom)%chimera%recv%data(ChiID)%donor_element%at(idonor)
    

    ! Set vector values for first donor
    chidg%data%sdata%rhs%dom(idom_d)%lvecs(ielem_d)%vec = THREE



    idonor = 2
    ! Set matrix values corresponding to first donor
    chidg%data%sdata%lhs%dom(idom)%chiblks(ielem,idonor)%mat = TWO



    idom_d = chidg%data%mesh(idom)%chimera%recv%data(ChiID)%donor_domain%at(idonor)
    ielem_d = chidg%data%mesh(idom)%chimera%recv%data(ChiID)%donor_element%at(idonor)




    ! Set vector values for first donor
    chidg%data%sdata%rhs%dom(idom_d)%lvecs(ielem_d)%vec = FOUR




    chidg%data%sdata%dq = chidg%data%sdata%lhs * chidg%data%sdata%rhs






    !
    ! Allocate storage to compute refrence expected values
    !
    allocate(mat_a(nterms_s*neqns, nterms_s*neqns))
    mat_a = ZERO
    mat_b = mat_a




    allocate(vec_a(nterms_s*neqns))
    vec_a = ZERO
    vec_b = vec_a
    refvec = vec_a


    mat_a = ONE
    vec_a = THREE

    mat_b = TWO
    vec_b = FOUR


    refvec = matmul(mat_a,vec_a) + matmul(mat_b,vec_b)




    @assertEqual(refvec, chidg%data%sdata%dq%dom(idom)%lvecs(ielem)%vec, tol)








    call chidg%data%sdata%dq%clear()
    call chidg%data%sdata%rhs%clear()
    call chidg%data%sdata%lhs%clear()








    call create_function(constant,'constant')

    call constant%set('val', 1.13_rk)
    call initialize_variable(chidg%data,1,constant)

    call constant%set('val', 190._rk)
    call initialize_variable(chidg%data,2,constant)

    call constant%set('val', ZERO)
    call initialize_variable(chidg%data,3,constant)

    call constant%set('val', ZERO)
    call initialize_variable(chidg%data,4,constant)

    call constant%set('val', 248000._rk)
    call initialize_variable(chidg%data,5,constant)



    call update_space(chidg%data)




    refvec = 0


    !
    ! Manual multiplication of one line of the matrix with the residual vector, Including Chimera blocks
    !
    iblk = XI_MAX
    idom_p = chidg%data%sdata%lhs%dom(idom)%lblks(ielem,iblk)%dparent()
    ielem_p = chidg%data%sdata%lhs%dom(idom)%lblks(ielem,iblk)%eparent()
    refvec = refvec + matmul(chidg%data%sdata%lhs%dom(idom)%lblks(ielem,iblk)%mat, chidg%data%sdata%rhs%dom(idom_p)%lvecs(ielem_p)%vec)



    iblk = ETA_MIN
    idom_p = chidg%data%sdata%lhs%dom(idom)%lblks(ielem,iblk)%dparent()
    ielem_p = chidg%data%sdata%lhs%dom(idom)%lblks(ielem,iblk)%eparent()
    refvec = refvec + matmul(chidg%data%sdata%lhs%dom(idom)%lblks(ielem,iblk)%mat, chidg%data%sdata%rhs%dom(idom_p)%lvecs(ielem_p)%vec)

    iblk = ETA_MAX
    idom_p = chidg%data%sdata%lhs%dom(idom)%lblks(ielem,iblk)%dparent()
    ielem_p = chidg%data%sdata%lhs%dom(idom)%lblks(ielem,iblk)%eparent()
    refvec = refvec + matmul(chidg%data%sdata%lhs%dom(idom)%lblks(ielem,iblk)%mat, chidg%data%sdata%rhs%dom(idom_p)%lvecs(ielem_p)%vec)

    iblk = ZETA_MAX
    idom_p = chidg%data%sdata%lhs%dom(idom)%lblks(ielem,iblk)%dparent()
    ielem_p = chidg%data%sdata%lhs%dom(idom)%lblks(ielem,iblk)%eparent()
    refvec = refvec + matmul(chidg%data%sdata%lhs%dom(idom)%lblks(ielem,iblk)%mat, chidg%data%sdata%rhs%dom(idom_p)%lvecs(ielem_p)%vec)

    iblk = DIAG
    idom_p = chidg%data%sdata%lhs%dom(idom)%lblks(ielem,iblk)%dparent()
    ielem_p = chidg%data%sdata%lhs%dom(idom)%lblks(ielem,iblk)%eparent()
    refvec = refvec + matmul(chidg%data%sdata%lhs%dom(idom)%lblks(ielem,iblk)%mat, chidg%data%sdata%rhs%dom(idom_p)%lvecs(ielem_p)%vec)



    idonor = 1
    idom_p = chidg%data%sdata%lhs%dom(idom)%chiblks(ielem,idonor)%dparent()
    ielem_p = chidg%data%sdata%lhs%dom(idom)%chiblks(ielem,idonor)%eparent()
    refvec = refvec + matmul(chidg%data%sdata%lhs%dom(idom)%chiblks(ielem,idonor)%mat, chidg%data%sdata%rhs%dom(idom_p)%lvecs(ielem_p)%vec)

    print*, chidg%data%mesh(idom)%chimera%recv%data(ChiID)%donor_gq_indices(idonor)%data()

    idonor = 2
    idom_p = chidg%data%sdata%lhs%dom(idom)%chiblks(ielem,idonor)%dparent()
    ielem_p = chidg%data%sdata%lhs%dom(idom)%chiblks(ielem,idonor)%eparent()
    refvec = refvec + matmul(chidg%data%sdata%lhs%dom(idom)%chiblks(ielem,idonor)%mat, chidg%data%sdata%rhs%dom(idom_p)%lvecs(ielem_p)%vec)


    print*, chidg%data%mesh(idom)%chimera%recv%data(ChiID)%donor_gq_indices(idonor)%data()







    !
    ! Standard Matrix-Vector Operation
    !
    chidg%data%sdata%dq = chidg%data%sdata%lhs * chidg%data%sdata%rhs




    !
    ! Check that the reference vector and the vector are equal for location idom, ielem
    !
    @assertEqual(refvec, chidg%data%sdata%dq%dom(idom)%lvecs(ielem)%vec)







end subroutine test_chidgMatrix_operator_chimera_mv
