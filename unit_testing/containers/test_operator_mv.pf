@Test
subroutine test_operator_mv()
    use pfunit_mod

    use mod_kinds,          only: rk, ik
    use mod_constants,      only: ZERO, ONE, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, &
                                  NINE, TEN, DIAG, XI_MIN, XI_MAX

    use type_blockvector,   only: blockvector_t
    use type_chidg,         only: chidg_t
    use type_point,         only: point_t

    use mod_testutils,      only: meshgen

    use operator_mv
    implicit none

    type(chidg_t)               :: chidg
    type(point_t),  allocatable :: pts(:,:,:)
    type(blockmatrix_t)         :: A
    type(blockvector_t)         :: x, b

    real(rk)                    :: tol
    integer(ik)                 :: nterms_c, nterms_s, idomain
    real(rk), dimension(8,8)    :: diag_1, diag_2, diag_3, ximax_1, ximin_2, ximax_2, ximin_3
    real(rk), dimension(8)      :: x_1, x_2, x_3
    real(rk), dimension(8)      :: b_ref_1, b_ref_2, b_ref_3



    tol         = 1.e-13_rk
    idomain     = 1
    nterms_c    = 8
    nterms_s    = 8


    ! Initialize ChiDG
    call chidg%init('env')


    ! Get grid points
    call meshgen('311',pts)


    ! Initialize domain
!    call dom%init_geom(idomain,nterms_c,pts)
!    call dom%init_sol('Scalar',nterms_s)
    call chidg%data%add_domain('D_01',pts,nterms_c,'scalar',nterms_s)



    !
    ! Initialize data containers
    !
    call A%init(chidg%data%mesh(1),'full')
    call x%init(chidg%data%mesh(1))
    call b%init(chidg%data%mesh(1))

    

    ! 
    ! Initialize blockmatrix data (A)
    !
    A%lblks(1,DIAG)%mat   = ONE
    A%lblks(1,XI_MAX)%mat = TWO
    
    
    A%lblks(2,XI_MIN)%mat = ONE
    A%lblks(2,DIAG)%mat   = TWO
    A%lblks(2,XI_MAX)%mat = THREE


    A%lblks(3,XI_MIN)%mat = ONE
    A%lblks(3,DIAG)%mat   = THREE
    


    !
    ! Initialize blockvector data (x)
    !
    x%lvecs(1)%vec = ONE
    x%lvecs(2)%vec = TWO
    x%lvecs(3)%vec = THREE




    !
    ! Perform matrix-vector multiplication. THIS IS BEING TESTED
    !
    b = A*x




    
    !
    ! Compute reference values
    !
    b_ref_1 = (ONE*ONE)*nterms_s + (TWO*TWO)*nterms_s
    b_ref_2 = (ONE*ONE)*nterms_s + (TWO*TWO)*nterms_s + (THREE*THREE)*nterms_s
    b_ref_3 = (ONE*TWO)*nterms_s + (THREE*THREE)*nterms_s





    !
    ! Test conditions
    !
    @assertEqual(b_ref_1,b%lvecs(1)%vec)
    @assertEqual(b_ref_2,b%lvecs(2)%vec)
    @assertEqual(b_ref_3,b%lvecs(3)%vec)










end subroutine test_operator_mv
