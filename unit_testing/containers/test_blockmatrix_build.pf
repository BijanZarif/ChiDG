! Test that the blockmatrix_t%build procedure is building the full matrix correctly


!
!     [  1   xma  ema   0   ]
!     |                     |
!     | xmi   2    0   ema  |
!     |                     |
!     | emi   0    3   xma  |
!     |                     |
!     [  0   emi  xmi   4   ]
!
@Test
subroutine test_blockmatrix_build()
    use pfunit_mod
    use mod_kinds,          only: rk,ik
    use type_chidg,         only: chidg_t
    use type_blockmatrix,   only: blockmatrix_t
    use type_domain,        only: domain_t
    use type_point,         only: point_t
    use mod_testutils,      only: meshgen

    implicit none
    type(chidg_t)               :: chidg
    type(domain_t)              :: dom
    type(blockmatrix_t)         :: bmat
    type(point_t), allocatable  :: pts(:,:,:)
    real(rk),      allocatable  :: fullmat(:,:)
    real(rk), dimension(8,8)    :: one, two, three, four, five, six, seven, eight, nine
    integer(ik)                 :: idomain, nterms_c, nterms_s

    ! set reference matrices
    one    = 1._rk
    two    = 2._rk
    three  = 3._rk
    four   = 4._rk
    five   = 5._rk
    six    = 6._rk
    seven  = 7._rk
    eight  = 8._rk
    nine   = 9._rk


    ! Initialize chidg environment
    call chidg%init('env')

    ! Generate points for a 2x2x1 mesh
    call meshgen('221',pts)


    ! Call domain initialization
    idomain  = 1
    nterms_c = 8
    nterms_s = 8
    call dom%init_geom(idomain,nterms_c,pts)
    call dom%init_sol('scalar',nterms_s)


    ! Call initialization on sparse block-matrix
    call bmat%init(dom%mesh,'full')



    ! Assign reference blocks to the block-sparse matrix
    bmat%lblks(1,7)%mat = one
    bmat%lblks(2,7)%mat = two
    bmat%lblks(3,7)%mat = three
    bmat%lblks(4,7)%mat = four

    bmat%lblks(1,2)%mat = five
    bmat%lblks(2,1)%mat = six
    bmat%lblks(3,2)%mat = seven
    bmat%lblks(4,1)%mat = eight


    !
    ! THIS IS WHAT WE ARE TESTING
    !
    ! Call routine to build full-matrix.
    call bmat%build(fullmat)




    ! Test Diagonal Blocks
    @assertEqual(one,fullmat(1:8,1:8))
    @assertEqual(two,fullmat(9:16,9:16))
    @assertEqual(three,fullmat(17:24,17:24))
    @assertEqual(four,fullmat(25:32,25:32))


    ! Test off-diagonal blocks
    @assertEqual(five,fullmat(1:8,9:16))
    @assertEqual(six,fullmat(9:16,1:8))
    @assertEqual(seven,fullmat(17:24,25:32))
    @assertEqual(eight,fullmat(25:32,17:24))



end subroutine


















