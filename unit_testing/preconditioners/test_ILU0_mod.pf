module test_ILU0_mod
    use pfunit_mod
    use mod_kinds,          only: rk, ik
    use mod_constants,      only: DIAG, XI_MIN, XI_MAX, ONE, TWO, THREE, FIVE, TEN
    use type_chidg,         only: chidg_t
    use type_point,         only: point_t
    use type_blockvector,   only: blockvector_t
    use precon_ILU0,        only: precon_ILU0_t

    use mod_testutils,      only: meshgen
    implicit none


    public  :: test_preconditioner_ILU0

    @TestCase
    type, extends(TestCase) :: test_preconditioner_ILU0
        type(chidg_t)       :: chidg
        type(precon_ILU0_t) :: ILU0

    contains
        procedure   :: setUp
        procedure   :: tearDown
    end type test_preconditioner_ILU0








contains

    !
    ! Set Up
    !
    subroutine setUp(this)
        class(test_preconditioner_ILU0),    intent(inout)   :: this

        type(point_t),  allocatable :: pts(:,:,:)
        integer(ik)                 :: nterms_c, nterms_s



        !
        ! Initialize ChiDG
        !
        call this%chidg%init('env')

        !
        ! Initialize a 3-element geometry
        !
        call meshgen('311',pts)
        call this%chidg%set('ndomains','')
        nterms_c = 8

        call this%chidg%domains(1)%init_geom(nterms_c,pts)


        !
        ! Initialize numerics
        !
        nterms_s = 1
        call this%chidg%domains(1)%init_sol('scalar',nterms_s)



        !
        ! Initialize linearization matrix with some reference values
        !
        this%chidg%domains(1)%sdata%lin%lblks(1,DIAG)%mat   = ONE
        this%chidg%domains(1)%sdata%lin%lblks(1,XI_MAX)%mat = -TWO

        this%chidg%domains(1)%sdata%lin%lblks(2,XI_MIN)%mat = TWO
        this%chidg%domains(1)%sdata%lin%lblks(2,DIAG)%mat   = -FIVE
        this%chidg%domains(1)%sdata%lin%lblks(2,XI_MAX)%mat = 12._rk

        this%chidg%domains(1)%sdata%lin%lblks(3,XI_MIN)%mat = TWO
        this%chidg%domains(1)%sdata%lin%lblks(3,DIAG)%mat   = -TEN


        !
        ! Initialize RHS vector with some reference values
        !
        this%chidg%domains(1)%sdata%rhs%lvecs(1)%vec = ONE
        this%chidg%domains(1)%sdata%rhs%lvecs(2)%vec = TWO
        this%chidg%domains(1)%sdata%rhs%lvecs(3)%vec = THREE


    end subroutine



    !
    ! Tear Down
    !
    subroutine tearDown(this)
        class(test_preconditioner_ILU0),    intent(inout)   :: this




    end subroutine



















@Test
subroutine test_ILU0_init(self)
    class(test_preconditioner_ILU0),    intent(inout)   :: self


    !
    ! Initialize preconditioner. THIS IS BEING TESTED
    !
    call self%ILU0%init(self%chidg%domains(1))



    !
    ! Test that only lower-triangular and diagonal components are allocated
    !
    @assertTrue(allocated(self%ILU0%LD%lblks(1,DIAG)%mat))

    @assertTrue(allocated(self%ILU0%LD%lblks(2,XI_MIN)%mat))
    @assertTrue(allocated(self%ILU0%LD%lblks(2,DIAG)%mat))

    @assertTrue(allocated(self%ILU0%LD%lblks(3,XI_MIN)%mat))
    @assertTrue(allocated(self%ILU0%LD%lblks(3,DIAG)%mat))


end subroutine










!> Test the matrix factorization values
!!
!!
!!
!!          [ 1   -2   0 ]
!!      A = [ 2   -5  12 ] = LU
!!          [ 0    2 -10 ]
!!
!!  Expecting
!!
!!          [ 1          ]
!!      L = [ 2   -1     ]
!!          [ 0   -2  14 ]
!!
!!  The diagonal values in L should actually be apart of the diagonal of U, but we just store 
!!  them in L for convenience.
!!
!!  The U factorization is identical to the upper-triangular components of matrix A, so they 
!!  are not computed or stored
!!
!-------------------------------------------------------------------------------------------
@Test
subroutine test_ILU0_update(self)
    class(test_preconditioner_ILU0),    intent(inout)   :: self

    !
    ! Initialize preconditioner
    !
    call self%ILU0%init(self%chidg%domains(1))


    !
    ! Call ILU0 update procedure. THIS IS BEING TESTED
    !
    associate ( A => self%chidg%domains(1)%sdata%lin, b => self%chidg%domains(1)%sdata%rhs )
    
        call self%ILU0%update(A,b)

    end associate






    !
    ! Test ILU0 preconditioner matrix factorization values
    !
    @assertEqual(ONE,self%ILU0%LD%lblks(1,DIAG)%mat(1,1))


    @assertEqual(TWO,self%ILU0%LD%lblks(2,XI_MIN)%mat(1,1))
    @assertEqual(-ONE,self%ILU0%LD%lblks(2,DIAG)%mat(1,1))


    @assertEqual(-TWO,self%ILU0%LD%lblks(3,XI_MIN)%mat(1,1))
    @assertEqual(14._rk,self%ILU0%LD%lblks(3,DIAG)%mat(1,1))


end subroutine











@Test
subroutine test_ILU0_apply(self)
    class(test_preconditioner_ILU0),    intent(inout)   :: self

    type(blockvector_t) :: z
    real(rk)            :: tol

    tol = 1.e-5_rk

    !
    ! Initialize preconditioner
    !
    call self%ILU0%init(self%chidg%domains(1))


    !
    ! Call ILU0 update procedure
    !
    associate ( A => self%chidg%domains(1)%sdata%lin, b => self%chidg%domains(1)%sdata%rhs )
        call self%ILU0%update(A,b)
    end associate


    !
    ! Apply preconditioner. THIS IS BEING TESTED
    !  
    associate ( A => self%chidg%domains(1)%sdata%lin, b => self%chidg%domains(1)%sdata%rhs )
        z = self%ILU0%apply(A,b)
    end associate





    @assertEqual(6.142857143_rk ,z%lvecs(1)%vec(1),tol)
    @assertEqual(2.57142857_rk  ,z%lvecs(2)%vec(1),tol)
    @assertEqual(0.2142857143_rk,z%lvecs(3)%vec(1),tol)


end subroutine










end module test_ILU0_mod
