!> Test that solverdata_t was returned 'allocated'
@Test
subroutine test__create_time_scheme__allocated()
    use pfunit_mod
    use mod_kinds,          only: rk,ik
    use mod_time_scheme,    only: create_time_scheme
    use atype_time_scheme,  only: time_scheme_t
    
    implicit none
    class(time_scheme_t),    allocatable :: time
    
    
    !> PROCEDURE BEING TESTED
    call create_time_scheme('fe',time)
    
    
    !> Test allocated
    @assertTrue(allocated(time))
    
end subroutine






!> Test that allocated type is returned with expected type
@Test
subroutine test__create_time_scheme__type()
    use pfunit_mod
    use mod_kinds,              only: rk,ik
    use mod_time_scheme,        only: create_time_scheme
    use atype_time_scheme,      only: time_scheme_t
    use forward_euler,          only: forward_euler_t
    
    implicit none
    class(time_scheme_t),    allocatable :: time
    
    
        
    !> PROCEDURE BEING TESTED
    call create_time_scheme('fe',time)
    
    
    !> Test for correct type
    select type(time)
        type is (forward_euler_t)
            !> correct type
            @assertTrue(.true.) 
        
        class default
            !> correct type was not detected, ERROR
            @assertTrue(.false.) 
    end select
            
    
end subroutine

