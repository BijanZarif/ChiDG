@Test
subroutine test_update_space_euler_cylinder()
    use pfunit_mod

    use mod_kinds,          only: rk, ik
    use mod_constants,      only: XI_MIN, XI_MAX, ETA_MIN, ETA_MAX, ZETA_MIN, ZETA_MAX, DIAG

    use type_chidg,         only: chidg_t
    use type_meshdata,      only: meshdata_t
    use atype_function,     only: function_t


    use mod_grid_operators, only: initialize_variable
    use mod_function,       only: create_function
    use mod_hdfio,          only: read_grid_hdf
    use mod_spatial,        only: update_space

    use operator_chidg_mv
    implicit none


    type(chidg_t)                   :: chidgA, chidgB
    type(meshdata_t), allocatable   :: meshdataA(:), meshdataB(:)
    class(function_t), allocatable  :: constant, gaussian
    integer(ik)     :: idom, nterms_s
    real(rk), allocatable   :: refvec_a(:), refvec_b(:)
    real(rk)        :: tol


    tol      = 1.e-7_rk
    nterms_s = 8


    !
    ! Initialize ChiDG
    !
    call chidgA%init('env')



    !
    ! Read grid
    !
    call read_grid_hdf('cylinder_chimera_overlapping_singledonor.h5',meshdataA)
    call read_grid_hdf('cylinder_chimera_overlapping_multipledonor.h5',meshdataB)



    !
    ! Add domains
    !
    do idom = 1,size(meshdataA)
        call chidgA%data%add_domain(trim(meshdataA(idom)%name),meshdataA(idom)%points,meshdataA(idom)%nterms_c,'euler',nterms_s)
    end do

    do idom = 1,size(meshdataB)
        call chidgB%data%add_domain(trim(meshdataB(idom)%name),meshdataB(idom)%points,meshdataB(idom)%nterms_c,'euler',nterms_s)
    end do




    !
    ! Add boundary conditions ChiDG - A
    !
    !call chidgA%data%add_bc('D_01','euler_totalinlet',XI_MIN)
    !call chidgA%data%add_bc('D_01','euler_pressureoutlet',XI_MAX)
    call chidgA%data%add_bc('D_01','euler_wall',ETA_MIN)
    call chidgA%data%add_bc('D_01','euler_wall',ETA_MAX)
    call chidgA%data%add_bc('D_01','euler_wall',ZETA_MIN)
    call chidgA%data%add_bc('D_01','euler_wall',ZETA_MAX)

    !call chidgA%data%add_bc('D_02','euler_totalinlet',XI_MIN)
    !call chidgA%data%add_bc('D_02','euler_pressureoutlet',XI_MAX)
    call chidgA%data%add_bc('D_02','euler_pressureoutlet',ETA_MIN)
    call chidgA%data%add_bc('D_02','euler_wall',ETA_MAX)
    call chidgA%data%add_bc('D_02','euler_wall',ZETA_MIN)
    call chidgA%data%add_bc('D_02','euler_wall',ZETA_MAX)


    !call chidgA%data%add_bc('D_02','euler_totalinlet',XI_MIN)
    !call chidgA%data%add_bc('D_02','euler_pressureoutlet',XI_MAX)
    call chidgA%data%add_bc('D_03','euler_wall',ETA_MIN)
    call chidgA%data%add_bc('D_03','euler_wall',ETA_MAX)
    call chidgA%data%add_bc('D_03','euler_wall',ZETA_MIN)
    call chidgA%data%add_bc('D_03','euler_wall',ZETA_MAX)


    !call chidgA%data%add_bc('D_04','euler_totalinlet',XI_MIN)
    !call chidgA%data%add_bc('D_04','euler_pressureoutlet',XI_MAX)
    call chidgA%data%add_bc('D_04','euler_totalinlet',ETA_MIN)
    call chidgA%data%add_bc('D_04','euler_wall',ETA_MAX)
    call chidgA%data%add_bc('D_04','euler_wall',ZETA_MIN)
    call chidgA%data%add_bc('D_04','euler_wall',ZETA_MAX)






    !
    ! Add boundary conditions to ChiDG - B
    !
    !call chidgB%data%add_bc('D_01','euler_totalinlet',XI_MIN)
    !call chidgB%data%add_bc('D_01','euler_pressureoutlet',XI_MAX)
    call chidgB%data%add_bc('D_01','euler_wall',ETA_MIN)
    call chidgB%data%add_bc('D_01','euler_wall',ETA_MAX)
    call chidgB%data%add_bc('D_01','euler_wall',ZETA_MIN)
    call chidgB%data%add_bc('D_01','euler_wall',ZETA_MAX)


    !call chidgB%data%add_bc('D_02','euler_totalinlet',XI_MIN)
    !call chidgB%data%add_bc('D_02','euler_pressureoutlet',XI_MAX)
    call chidgB%data%add_bc('D_02','euler_pressureoutlet',ETA_MIN)
    call chidgB%data%add_bc('D_02','euler_wall',ETA_MAX)
    call chidgB%data%add_bc('D_02','euler_wall',ZETA_MIN)
    call chidgB%data%add_bc('D_02','euler_wall',ZETA_MAX)


    !call chidgB%data%add_bc('D_03','euler_totalinlet',XI_MIN)
    !call chidgB%data%add_bc('D_03','euler_pressureoutlet',XI_MAX)
    call chidgB%data%add_bc('D_03','euler_wall',ETA_MIN)
    call chidgB%data%add_bc('D_03','euler_wall',ETA_MAX)
    call chidgB%data%add_bc('D_03','euler_wall',ZETA_MIN)
    call chidgB%data%add_bc('D_03','euler_wall',ZETA_MAX)


    !call chidgB%data%add_bc('D_04','euler_totalinlet',XI_MIN)
    !call chidgB%data%add_bc('D_04','euler_pressureoutlet',XI_MAX)
    call chidgB%data%add_bc('D_04','euler_totalinlet',ETA_MIN)
    call chidgB%data%add_bc('D_04','euler_wall',ETA_MAX)
    call chidgB%data%add_bc('D_04','euler_wall',ZETA_MIN)
    call chidgB%data%add_bc('D_04','euler_wall',ZETA_MAX)









    !
    ! Initialize solution data storage
    !
    call chidgA%init('chimera')
    call chidgA%data%init_sdata()

    call chidgB%init('chimera')
    call chidgB%data%init_sdata()




    !
    ! Initialize solution
    !
    call create_function(constant,'constant')

    call constant%set('val',1.13_rk)
    call initialize_variable(chidgA%data,1,constant)
    call initialize_variable(chidgB%data,1,constant)

    call constant%set('val',190.0_rk)
    call initialize_variable(chidgA%data,2,constant)
    call initialize_variable(chidgB%data,2,constant)

    call constant%set('val',ZERO)
    call initialize_variable(chidgA%data,3,constant)
    call initialize_variable(chidgB%data,3,constant)

    call constant%set('val',ZERO)
    call initialize_variable(chidgA%data,4,constant)
    call initialize_variable(chidgB%data,4,constant)

    call constant%set('val',248000.0_rk)
    call initialize_variable(chidgA%data,5,constant)
    call initialize_variable(chidgB%data,5,constant)




    !
    ! Call update_space
    !
    print*, 'ChiDG - A: Updating Space'
    call update_space(chidgA%data)
    print*, 'ChiDG - B: Updating Space'
    call update_space(chidgB%data)






    !
    ! Compare matrix vector product
    !
    chidgA%data%sdata%rhs = chidgA%data%sdata%lhs * chidgA%data%sdata%q
    chidgB%data%sdata%rhs = chidgB%data%sdata%lhs * chidgB%data%sdata%q


    !
    ! Make sure q vector is the same
    !
    @assertEqual(chidgA%data%sdata%q%dom(4)%lvecs(19)%vec, chidgB%data%sdata%q%dom(4)%lvecs(19)%vec )


    !
    ! Test
    !
    @assertEqual(chidgA%data%sdata%rhs%dom(4)%lvecs(18)%vec,  chidgB%data%sdata%rhs%dom(4)%lvecs(18)%vec,tol)
    @assertEqual(chidgA%data%sdata%rhs%dom(4)%lvecs(19)%vec,  chidgB%data%sdata%rhs%dom(4)%lvecs(19)%vec,tol)
    @assertEqual(chidgA%data%sdata%rhs%dom(4)%lvecs(24)%vec,  chidgB%data%sdata%rhs%dom(4)%lvecs(24)%vec,tol)
    @assertEqual(chidgA%data%sdata%rhs%dom(4)%lvecs(25)%vec,  chidgB%data%sdata%rhs%dom(4)%lvecs(25)%vec,tol)
    @assertEqual(chidgA%data%sdata%rhs%dom(4)%lvecs(30)%vec,  chidgB%data%sdata%rhs%dom(4)%lvecs(30)%vec,tol)
    @assertEqual(chidgA%data%sdata%rhs%dom(4)%lvecs(31)%vec,  chidgB%data%sdata%rhs%dom(4)%lvecs(31)%vec,tol)
    @assertEqual(chidgA%data%sdata%rhs%dom(4)%lvecs(36)%vec,  chidgB%data%sdata%rhs%dom(4)%lvecs(36)%vec,tol)











end subroutine test_update_space_euler_cylinder
