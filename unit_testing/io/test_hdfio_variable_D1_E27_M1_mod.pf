module test_hdfio_variable_D1_E27_M1_mod
    use pfunit_mod
    use type_chidg,     only: chidg_t
    use mod_kinds,      only: rk,ik
    use mod_constants,  only: ONE, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT
    use mod_hdfio,      only: read_grid_hdf, read_variable_hdf, write_variable_hdf
    use type_chidg,     only: chidg_t
    use type_meshdata,  only: meshdata_t
    implicit none


    public  :: test_hdfio_variable_D1_E27_M1

    @TestCase
    type, extends(TestCase) ::  test_hdfio_variable_D1_E27_M1

        type(chidg_t)               :: chidg
        character(12)               :: filename = 'D1_E27_M1.h5'
    
    contains
        procedure   ::  setUp
        procedure   ::  tearDown
    end type test_hdfio_variable_D1_E27_M1



contains

    !> NOTE: make sure to use 'this' instead of 'self' since these are over-writting a derived type 
    !! procedure. The argument names have to match
    subroutine setUp(this)
        class(test_hdfio_variable_D1_E27_M1),    intent(inout)   :: this

        integer(ik)                     :: nterms_s, nterms_c
        type(meshdata_t), allocatable   :: meshdata(:)

        !
        ! Initialize ChiDG environment
        !
        call this%chidg%init('env')


        !
        ! Read grid data from file 
        !
        call read_grid_hdf(this%filename, meshdata)
    

        !
        ! Initialize chidg domain
        !
        nterms_s = 8
        call this%chidg%data%add_domain(meshdata(1)%name,meshdata(1)%points,meshdata(1)%nterms_c,'scalar',nterms_s)
        call this%chidg%data%init_sdata()

    end subroutine

    
    subroutine tearDown(this)
        class(test_hdfio_variable_D1_E27_M1),    intent(inout)   :: this
        
    end subroutine




!-----------------------------------------------------------------------------
!   TESTS
!-----------------------------------------------------------------------------


@Test
    subroutine test_hdfio_variable_write_read_D1_E27_M1(this)
        class(test_hdfio_variable_D1_E27_M1),     intent(inout)   :: this 

        real(rk)                    :: tol, ref(8)
        integer(ik)                 :: ielem, idom
        
        tol = 1.e-14_rk
        
        idom = 1
        
        associate ( q => this%chidg%data%sdata%q%dom(1)%lvecs )
            
            ! Set reference solution values
            ref = [ONE, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT]
            
            
            ! Assign reference solution
            do ielem = 1,this%chidg%data%mesh(1)%nelem
                q(ielem)%vec = ref + real(ielem,rk)
            end do
            
            !
            ! Write variable
            !
            print*, 'Writing variable'
            call write_variable_hdf(this%filename,'u',1,idom,this%chidg%data)
            

            ! Reset variable
            do ielem = 1,this%chidg%data%mesh(1)%nelem
                q(ielem)%vec = -1._rk
            end do
            

            !
            ! Read variable
            !
            print*, 'Reading variable'
            call read_variable_hdf(this%filename,'u',1,idom,this%chidg%data)
           


            ! Test that the read solution values equal the reference values
            ! Testing elements 1-10, out of 27
            @assertEqual(ref+1._rk, q(1)%vec,  tol)
            @assertEqual(ref+2._rk, q(2)%vec,  tol)
            @assertEqual(ref+3._rk, q(3)%vec,  tol)
            @assertEqual(ref+4._rk, q(4)%vec,  tol)
            @assertEqual(ref+5._rk, q(5)%vec,  tol)
            @assertEqual(ref+6._rk, q(6)%vec,  tol)
            @assertEqual(ref+7._rk, q(7)%vec,  tol)
            @assertEqual(ref+8._rk, q(8)%vec,  tol)
            @assertEqual(ref+9._rk, q(9)%vec,  tol)
            @assertEqual(ref+10._rk,q(10)%vec, tol)        
            @assertEqual(ref+11._rk,q(11)%vec, tol)        
            @assertEqual(ref+12._rk,q(12)%vec, tol)        
            @assertEqual(ref+13._rk,q(13)%vec, tol)        
            @assertEqual(ref+14._rk,q(14)%vec, tol)        
            @assertEqual(ref+15._rk,q(15)%vec, tol)        
            @assertEqual(ref+16._rk,q(16)%vec, tol)        
            @assertEqual(ref+17._rk,q(17)%vec, tol)        
            @assertEqual(ref+18._rk,q(18)%vec, tol)        
            @assertEqual(ref+19._rk,q(19)%vec, tol)        
            @assertEqual(ref+20._rk,q(20)%vec, tol)        
            @assertEqual(ref+21._rk,q(21)%vec, tol)        
            @assertEqual(ref+22._rk,q(22)%vec, tol)        
            @assertEqual(ref+23._rk,q(23)%vec, tol)        
            @assertEqual(ref+24._rk,q(24)%vec, tol)        
            @assertEqual(ref+25._rk,q(25)%vec, tol)        
            @assertEqual(ref+26._rk,q(26)%vec, tol)        
            @assertEqual(ref+27._rk,q(27)%vec, tol)        
       end associate
            
    end subroutine


end module test_hdfio_variable_D1_E27_M1_mod
