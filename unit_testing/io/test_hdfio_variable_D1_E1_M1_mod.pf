module test_hdfio_variable_D1_E1_M1_mod
    use pfunit_mod
    use type_chidg,     only: chidg_t
    use type_meshdata,  only: meshdata_t
    use mod_kinds,      only: rk,ik
    use mod_constants,  only: ONE, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT
    use mod_hdfio,      only: read_grid_hdf, read_variable_hdf, write_variable_hdf
    use mod_testutils,  only: meshgen
    implicit none


    public  :: test_hdfio_variable_D1_E1_M1

@TestCase
    type, extends(TestCase) ::  test_hdfio_variable_D1_E1_M1
        type(chidg_t)               :: chidg
        character(11)               :: filename = 'D1_E1_M1.h5'
    
    contains
        procedure   ::  setUp
        procedure   ::  tearDown
    end type test_hdfio_variable_D1_E1_M1



contains

    !> NOTE: make sure to use 'this' instead of 'self' since these are over-writting a derived type 
    !! procedure. The argument names have to match
    subroutine setUp(this)
        class(test_hdfio_variable_D1_E1_M1),    intent(inout)   :: this

        integer(ik)                                 :: nterms_s, nterms_c
        type(meshdata_t),   allocatable             :: meshdata(:)

        !
        ! Initialize ChiDG environment
        !
        call this%chidg%init('env')


        !
        ! Read grid data from file
        !
        call read_grid_hdf(this%filename, meshdata)


        !
        ! Add domain to ChiDG 
        !
        nterms_s = 8
        call this%chidg%data%add_domain(meshdata(1)%name,meshdata(1)%points,meshdata(1)%nterms_c,'scalar',nterms_s)
        call this%chidg%data%init_sdata()

    end subroutine
    
    subroutine tearDown(this)
        class(test_hdfio_variable_D1_E1_M1),    intent(inout)   :: this
        
        call this%chidg%close()
    end subroutine




!-----------------------------------------------------------------------------
!   TESTS
!-----------------------------------------------------------------------------

@Test
    subroutine test_hdfio_variable_write_read_D1_E1_M1(this)
        class(test_hdfio_variable_D1_E1_M1),     intent(inout)   :: this 

        integer(ik)                 :: idom
        real(rk)                    :: tol, ref(8)
        
        tol = 1.e-14_rk
        
        ! Set reference solution values
        ref = [ONE, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT]
        
        idom = 1
        
        associate (q => this%chidg%data%sdata%q%dom(1))
            
            ! Assign reference solution
            q%lvecs(1)%vec = ref
            
            ! Write solution values
            call write_variable_hdf(this%filename,'u',1,idom,this%chidg%data)
            
            ! Reset solution
            q%lvecs(1)%vec = 0._rk
            
            ! Read solution values
            call read_variable_hdf(this%filename,'u',1,idom,this%chidg%data)
           
            ! Test that the read solution values equal the reference values
            @assertEqual(ref,this%chidg%data%sdata%q%dom(1)%lvecs(1)%vec, tol)
        end associate
        
    end subroutine




end module test_hdfio_variable_D1_E1_M1_mod
