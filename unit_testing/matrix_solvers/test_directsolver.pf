@Test
subroutine test_directsolver_solve()
    use pfunit_mod
    use mod_kinds,          only: rk, ik
    use mod_constants,      only: ZERO, ONE, TWO, THREE, FOUR, DIAG, XI_MIN, XI_MAX
    use type_chidg,         only: chidg_t
    use type_domain,        only: domain_t
    use type_point,         only: point_t

    use type_directsolver,  only: directsolver_t
    use type_blockmatrix,   only: blockmatrix_t
    use type_blockvector,   only: blockvector_t

    use mod_testutils,      only: meshgen
    implicit none

    type(chidg_t)               :: chidg
    type(domain_t)              :: dom
    type(point_t), allocatable  :: pts(:,:,:)

    type(blockmatrix_t)         :: A
    type(blockvector_t)         :: x, b
    type(directsolver_t)        :: matrix_solver
    
    real(rk)    :: tol
    integer(ik) :: nterms_c, nterms_s


    tol      = 1.e-14_rk
    nterms_c = 8
    nterms_s = 1


    ! Initialize ChiDG
    call chidg%init('env')


    ! Get grid points
    call meshgen('411',pts)


    ! Initialize domain
    call dom%init_geom(nterms_c,pts)
    call dom%init_sol('Scalar',nterms_s)


    ! Initialize data containers
    call A%init(dom%mesh,'full')
    call x%init(dom%mesh)
    call b%init(dom%mesh)





    ! Initialize blockmatrix data (A)
    !
    ! [2 1 0 0]
    ! [1 2 1 0]
    ! [0 1 2 1]
    ! [0 0 1 2]
    !
    A%lblks(1,DIAG)%mat   = TWO
    A%lblks(1,XI_MAX)%mat = ONE

    A%lblks(2,XI_MIN)%mat = ONE
    A%lblks(2,DIAG)%mat   = TWO
    A%lblks(2,XI_MAX)%mat = ONE

    A%lblks(3,XI_MIN)%mat = ONE
    A%lblks(3,DIAG)%mat   = TWO
    A%lblks(3,XI_MAX)%mat = ONE

    A%lblks(4,XI_MIN)%mat = ONE
    A%lblks(4,DIAG)%mat   = TWO



    ! Initialize blockvector data (b)
    !
    ! [1]
    ! [2]
    ! [3]
    ! [4]
    !
    b%lvecs(1)%vec = ONE
    b%lvecs(2)%vec = TWO
    b%lvecs(3)%vec = THREE
    b%lvecs(4)%vec = FOUR



    !
    ! Solve matrix system. Ax=b. TESTING
    !
    call matrix_solver%solve(A,x,b)



    ! Expecting solution
    !
    !     [0]
    ! x = [1]
    !     [0]
    !     [2]
    !
    @assertEqual(ZERO,x%lvecs(1)%vec,tol)
    @assertEqual(ONE,x%lvecs(2)%vec,tol)
    @assertEqual(ZERO,x%lvecs(3)%vec,tol)
    @assertEqual(TWO,x%lvecs(4)%vec,tol)



end subroutine
