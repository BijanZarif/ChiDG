@Test
subroutine test_fgmres_ref_solve()
    use pfunit_mod
    use mod_kinds,          only: rk, ik
    use mod_constants,      only: ZERO, ONE, TWO, THREE, FOUR, DIAG, XI_MIN, XI_MAX
    use type_chidg,         only: chidg_t
    use type_point,         only: point_t

    use type_fgmres,        only: fgmres_t

    use type_blockmatrix,   only: blockmatrix_t
    use type_blockvector,   only: blockvector_t

    use mod_testutils,      only: meshgen
    implicit none

    type(chidg_t)               :: chidg
    type(point_t), allocatable  :: pts(:,:,:)

    type(blockmatrix_t)         :: A
    type(blockvector_t)         :: x, b
    type(fgmres_t)              :: matrix_solver
    
    real(rk)    :: tol
    integer(ik) :: nterms_c, nterms_s, idomain


    tol      = 1.e-9_rk
    idomain  = 1
    nterms_c = 8
    nterms_s = 1


    ! Initialize ChiDG
    call chidg%init('env')

    ! Set ChiDG components
    call chidg%set('timescheme',    'newton')
    call chidg%set('matrixsolver',  'fgmres')
    call chidg%set('preconditioner','identity')


    ! Get grid points
    call meshgen('211',pts)


    ! Initialize domain
    allocate(chidg%data%domains(1))
    call chidg%data%domains(1)%init_geom(idomain,nterms_c,pts)
    call chidg%data%domains(1)%init_sol('Scalar',nterms_s)


    ! Initialize data containers
    call A%init(chidg%data%domains(1)%mesh,'full')
    call x%init(chidg%data%domains(1)%mesh)
    call b%init(chidg%data%domains(1)%mesh)





    ! Initialize blockmatrix data (A)
    !
    ! [0  1]
    ! [1  0]
    ! 
    !
    A%lblks(1,DIAG)%mat   = ZERO
    A%lblks(1,XI_MAX)%mat = ONE

    A%lblks(2,XI_MIN)%mat = -ONE
    A%lblks(2,DIAG)%mat   = ZERO




    ! Initialize blockvector data (b)
    !
    ! [ 1]
    ! [ 1]
    !
    b%lvecs(1)%vec = ONE
    b%lvecs(2)%vec = ONE



    !
    ! Solve matrix system. Ax=b. TESTING
    !
    associate ( M => chidg%preconditioner )
    matrix_solver%report = .false.  
    matrix_solver%tol    = 1.e-13_rk
    call matrix_solver%solve(A,x,b,M)
    end associate



    ! Expecting solution
    !
    !     [-1]
    ! x = [ 1]
    !
    @assertEqual(-ONE,x%lvecs(1)%vec,tol)
    @assertEqual(ONE,x%lvecs(2)%vec,tol)



end subroutine test_fgmres_ref_solve
