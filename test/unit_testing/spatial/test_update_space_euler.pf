@Test
subroutine test_update_space_euler()
#include <messenger.h>
    use pfunit_mod

    use mod_kinds,          only: rk, ik
    use mod_constants,      only: XI_MIN, XI_MAX, ETA_MIN, ETA_MAX, ZETA_MIN, ZETA_MAX, DIAG, &
                                  IO_DESTINATION

    use type_chidg,         only: chidg_t
    use type_meshdata,      only: meshdata_t
    use atype_function,     only: function_t

    use mod_grid_operators, only: initialize_variable
    use mod_function,       only: create_function
    use mod_hdfio,          only: read_grid_hdf
    use mod_spatial,        only: update_space

    use operator_chidg_mv
    implicit none


    type(chidg_t)                   :: chidgA, chidgB
    type(meshdata_t), allocatable   :: meshdataA(:), meshdataB(:)
    class(function_t), allocatable  :: constant, gaussian
    integer(ik)     :: idom, nterms_s
    real(rk)        :: tol


    tol             = 1.e-7_rk
    nterms_s        = 8
    IO_DESTINATION  = 'file'


    !
    ! Initialize ChiDG
    !
    call chidgA%init('env')



    !
    ! Read grid
    !
    call read_grid_hdf('smoothbump_singledomain_twobump.h5',meshdataA)
    call read_grid_hdf('smoothbump_twodomain_twobump_abutting.h5',meshdataB)



    !
    ! Add domains
    !
    do idom = 1,size(meshdataA)
        call chidgA%data%add_domain(trim(meshdataA(idom)%name),meshdataA(idom)%points,meshdataA(idom)%nterms_c,'euler',nterms_s)
    end do

    do idom = 1,size(meshdataB)
        call chidgB%data%add_domain(trim(meshdataB(idom)%name),meshdataB(idom)%points,meshdataB(idom)%nterms_c,'euler',nterms_s)
    end do




    !
    ! Add boundary conditions ChiDG - A
    !
    call chidgA%data%add_bc('D_01','euler_totalinlet',XI_MIN)
    call chidgA%data%add_bc('D_01','euler_pressureoutlet',XI_MAX)
    call chidgA%data%add_bc('D_01','euler_wall',ETA_MIN)
    call chidgA%data%add_bc('D_01','euler_wall',ETA_MAX)
    call chidgA%data%add_bc('D_01','euler_wall',ZETA_MIN)
    call chidgA%data%add_bc('D_01','euler_wall',ZETA_MAX)

    !
    ! Add boundary conditions to ChiDG - B
    !
    call chidgB%data%add_bc('D_01','euler_totalinlet',XI_MIN)
    !call chidgB%data%add_bc('D_01','euler_pressureoutlet',XI_MAX)
    call chidgB%data%add_bc('D_01','euler_wall',ETA_MIN)
    call chidgB%data%add_bc('D_01','euler_wall',ETA_MAX)
    call chidgB%data%add_bc('D_01','euler_wall',ZETA_MIN)
    call chidgB%data%add_bc('D_01','euler_wall',ZETA_MAX)


    !call chidgB%data%add_bc('D_02','euler_totalinlet',XI_MIN)
    call chidgB%data%add_bc('D_02','euler_pressureoutlet',XI_MAX)
    call chidgB%data%add_bc('D_02','euler_wall',ETA_MIN)
    call chidgB%data%add_bc('D_02','euler_wall',ETA_MAX)
    call chidgB%data%add_bc('D_02','euler_wall',ZETA_MIN)
    call chidgB%data%add_bc('D_02','euler_wall',ZETA_MAX)




    !
    ! Initialize solution data storage
    !
    call chidgA%init('chimera')
    call chidgA%data%init_sdata()

    call chidgB%init('chimera')
    call chidgB%data%init_sdata()




    !
    ! Initialize solution
    !
    call create_function(constant,'constant')

    call constant%set('val',1.13262_rk)
    call initialize_variable(chidgA%data,1,constant)
    call initialize_variable(chidgB%data,1,constant)

    call constant%set('val',190.339029_rk)
    call initialize_variable(chidgA%data,2,constant)
    call initialize_variable(chidgB%data,2,constant)

    call constant%set('val',ZERO)
    call initialize_variable(chidgA%data,3,constant)
    call initialize_variable(chidgB%data,3,constant)

    call constant%set('val',ZERO)
    call initialize_variable(chidgA%data,4,constant)
    call initialize_variable(chidgB%data,4,constant)

    call constant%set('val',248493.425_rk)
    call initialize_variable(chidgA%data,5,constant)
    call initialize_variable(chidgB%data,5,constant)




    !
    ! Call update_space
    !
    call write_line("ChiDG - A: Updating Space")
    call update_space(chidgA%data)
    
    call write_line("ChiDG - B: Updating Space")
    call update_space(chidgB%data)




    !
    ! Compare residual vector entries
    !
    @assertEqual(chidgA%data%sdata%rhs%dom(1)%lvecs(6)%vec,  chidgB%data%sdata%rhs%dom(1)%lvecs(6)%vec )
    @assertEqual(chidgA%data%sdata%rhs%dom(1)%lvecs(7)%vec,  chidgB%data%sdata%rhs%dom(2)%lvecs(1)%vec )
    @assertEqual(chidgA%data%sdata%rhs%dom(1)%lvecs(18)%vec, chidgB%data%sdata%rhs%dom(1)%lvecs(12)%vec )
    @assertEqual(chidgA%data%sdata%rhs%dom(1)%lvecs(19)%vec, chidgB%data%sdata%rhs%dom(2)%lvecs(7)%vec )
    @assertEqual(chidgA%data%sdata%rhs%dom(1)%lvecs(30)%vec, chidgB%data%sdata%rhs%dom(1)%lvecs(18)%vec )
    @assertEqual(chidgA%data%sdata%rhs%dom(1)%lvecs(31)%vec, chidgB%data%sdata%rhs%dom(2)%lvecs(13)%vec )
    @assertEqual(chidgA%data%sdata%rhs%dom(1)%lvecs(42)%vec, chidgB%data%sdata%rhs%dom(1)%lvecs(24)%vec )
    @assertEqual(chidgA%data%sdata%rhs%dom(1)%lvecs(43)%vec, chidgB%data%sdata%rhs%dom(2)%lvecs(19)%vec )


    !
    ! Compare jacobian matrix entries
    !
    ! Comparing the Single-Domain 16 element block jacobians to the Two-Domain, 8-element block Chimera jacobians

    !
    ! Domain 1 Chimera Blocks
    !
    @assertEqual(chidgA%data%sdata%lhs%dom(1)%lblks(6,XI_MAX)%mat,   chidgB%data%sdata%lhs%dom(1)%chiblks(6,1)%mat, tol)
    @assertEqual(chidgA%data%sdata%lhs%dom(1)%lblks(7,XI_MIN)%mat,   chidgB%data%sdata%lhs%dom(2)%chiblks(1,1)%mat, tol)
    @assertEqual(chidgA%data%sdata%lhs%dom(1)%lblks(18,XI_MAX)%mat,  chidgB%data%sdata%lhs%dom(1)%chiblks(12,1)%mat, tol)
    @assertEqual(chidgA%data%sdata%lhs%dom(1)%lblks(19,XI_MIN)%mat,  chidgB%data%sdata%lhs%dom(2)%chiblks(7,1)%mat, tol)
    @assertEqual(chidgA%data%sdata%lhs%dom(1)%lblks(30,XI_MAX)%mat,  chidgB%data%sdata%lhs%dom(1)%chiblks(18,1)%mat, tol)
    @assertEqual(chidgA%data%sdata%lhs%dom(1)%lblks(31,XI_MIN)%mat,  chidgB%data%sdata%lhs%dom(2)%chiblks(13,1)%mat, tol)
    @assertEqual(chidgA%data%sdata%lhs%dom(1)%lblks(42,XI_MAX)%mat,  chidgB%data%sdata%lhs%dom(1)%chiblks(24,1)%mat, tol)
    @assertEqual(chidgA%data%sdata%lhs%dom(1)%lblks(43,XI_MIN)%mat,  chidgB%data%sdata%lhs%dom(2)%chiblks(19,1)%mat, tol)



    !
    ! Compare matrix vector product
    !
    chidgA%data%sdata%rhs = chidgA%data%sdata%lhs * chidgA%data%sdata%q
    chidgB%data%sdata%rhs = chidgB%data%sdata%lhs * chidgB%data%sdata%q




    !
    ! Test
    !
    @assertEqual(chidgA%data%sdata%rhs%dom(1)%lvecs(6)%vec,  chidgB%data%sdata%rhs%dom(1)%lvecs(6)%vec,tol)
    @assertEqual(chidgA%data%sdata%rhs%dom(1)%lvecs(7)%vec,  chidgB%data%sdata%rhs%dom(2)%lvecs(1)%vec,tol)
    @assertEqual(chidgA%data%sdata%rhs%dom(1)%lvecs(18)%vec, chidgB%data%sdata%rhs%dom(1)%lvecs(12)%vec,tol)
    @assertEqual(chidgA%data%sdata%rhs%dom(1)%lvecs(19)%vec, chidgB%data%sdata%rhs%dom(2)%lvecs(7)%vec,tol)
    @assertEqual(chidgA%data%sdata%rhs%dom(1)%lvecs(30)%vec, chidgB%data%sdata%rhs%dom(1)%lvecs(18)%vec,tol)
    @assertEqual(chidgA%data%sdata%rhs%dom(1)%lvecs(31)%vec, chidgB%data%sdata%rhs%dom(2)%lvecs(13)%vec,tol)
    @assertEqual(chidgA%data%sdata%rhs%dom(1)%lvecs(42)%vec, chidgB%data%sdata%rhs%dom(1)%lvecs(24)%vec,tol)
    @assertEqual(chidgA%data%sdata%rhs%dom(1)%lvecs(43)%vec, chidgB%data%sdata%rhs%dom(2)%lvecs(19)%vec,tol)










    !
    ! Close ChiDG interface
    !
    call chidgA%close()
    call chidgB%close()

end subroutine test_update_space_euler
