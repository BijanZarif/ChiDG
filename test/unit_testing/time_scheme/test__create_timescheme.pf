!> Test that solverdata_t was returned 'allocated'
@Test
subroutine test__create_timescheme__allocated()
    use pfunit_mod
    use mod_kinds,          only: rk,ik
    use mod_time_scheme,    only: create_time_scheme
    use type_time_scheme,   only: time_scheme_t
    
    implicit none
    class(time_scheme_t),    allocatable :: time
    
    
    ! PROCEDURE BEING TESTED
    call create_time_scheme('steady',time)
    
    
    ! Test allocated
    @assertTrue(allocated(time))
    
end subroutine






!> Test that allocated type is returned with expected type
@Test
subroutine test__create_timescheme__type()
    use pfunit_mod
    use mod_kinds,              only: rk,ik
    use mod_time_scheme,        only: create_time_scheme
    use type_time_scheme,       only: time_scheme_t
    use steady,                 only: steady_t
    
    implicit none
    class(time_scheme_t),     allocatable :: time
    
    
        
    ! PROCEDURE BEING TESTED
    call create_time_scheme('steady',time)
    
    
    ! Test for correct type
    select type(time)
        type is (steady_t)
            ! correct type
            @assertTrue(.true.) 
        
        class default
            ! correct type was not detected, ERROR
            @assertTrue(.false.) 
    end select
            
    
end subroutine

