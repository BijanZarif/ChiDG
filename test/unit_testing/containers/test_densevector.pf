! Test init_square procedure for initializing square matrix storage
@Test
subroutine test_densevector_INIT()
    use pfunit_mod
    use mod_kinds,          only: rk,ik
    use type_densevector
    
    implicit none
    type(densevector_t)  :: vec
    integer(ik)          :: nterms, neqns, vsize, parent, nentries
    
    
    ! Test initialization procedure
    nterms = 8
    neqns  = 4
    vsize   = nterms * neqns
    nentries = vsize
    parent = 55
    
    call vec%init(nterms,neqns,parent)
    
    @assertEqual(vsize,vec%nentries())
    @assertEqual(parent,vec%parent())
    
    
    ! Test reinitialization procedure
    nterms = 12
    neqns  = 3
    vsize   = nterms * neqns
    nentries = vsize
    parent = 22
    
    call vec%init(nterms,neqns,parent)
    
    @assertEqual(nentries,vec%nentries())
    @assertEqual(parent,vec%parent())

end subroutine





! Test 'reparent' procedure for assigning new parent element index
@Test
subroutine test_densevector_REPARENT()
    use pfunit_mod
    use mod_kinds, only: rk,ik
    use type_densevector
    
    implicit none
    type(densevector_t)     :: vec
    integer(ik)             :: nterms, neqns, vsize, parent, nentries
    
    
    ! Initialize vector
    nterms = 8
    neqns  = 2
    vsize = nterms * neqns
    nentries = vsize
    parent = 55
    
    call vec%init(nterms,neqns,parent)
    
    ! Test resize procedure
    parent = 21
    
    call vec%reparent(parent)
    
    @assertEqual(nentries,vec%nentries())
    @assertEqual(parent,vec%parent())

end subroutine







! Test matrix-view of vector data
!@Test
!subroutine test_densevector_matrix_view()
!    use pfunit_mod
!    use mod_kinds,      only: rk, ik
!    use mod_constants,  only: ONE, TWO
!    use type_densevector
!
!    implicit none
!    type(densevector_t)     :: vec
!    integer(ik)             :: nterms, neqns, vsize, parent, nentries
!    real(rk)                :: var_one(8), var_two(8)
!
!    ! Initialize vector
!    nterms = 8
!    neqns = 2
!    parent = 10
!    nentries = nterms * neqns
!
!    call vec%init(nterms,neqns,parent)
!    
!
!    ! Set vector data
!    vec%vec(1:8)  = ONE    ! var_one
!    vec%vec(9:16) = TWO    ! var_two
!
!
!    var_one = vec%mat(:,1)
!    var_two = vec%mat(:,2)
!
!    @assertEqual(ONE,var_one)
!    @assertEqual(TWO,var_two)
!
!end subroutine 
!









